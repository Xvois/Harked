/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/3wQeMNdL4zH
 */
import {Textarea} from "@/Components/ui/textarea"
import {Button} from "@/Components/ui/button"
import React, {useEffect} from "react"
import {Comment, CommentWUC} from "@/Tools/Interfaces/commentInterfaces";
import {modifyComment, retrieveCommentTreeAndUser, retrieveSectionComments, submitComment} from "@/Tools/comments";
import {Avatar, AvatarFallback, AvatarImage} from "@/Components/ui/avatar";
import {isLoggedIn, retrieveLoggedUserID, retrieveUser} from "@/Tools/users";
import {User} from "@/Tools/Interfaces/userInterfaces";
import {UserHoverCard} from "@/Components/UserHoverCard";
import {subscribe} from "@/API/pocketbase";
import {RecordSubscription} from "pocketbase";

const StdDisplay = (props: { loggedUser: User }) => {
    return (
        <div className={"inline-flex gap-4"}>
            <Avatar>
                <AvatarImage src={props.loggedUser.images[0].url} alt="User avatar"/>
                <AvatarFallback>{props.loggedUser.display_name}</AvatarFallback>
            </Avatar>
            <div className="flex items-center gap-4">
                <div className="grid gap-1">
                    <h3 className="font-semibold">Write a comment</h3>
                    <p className="text-sm leading-none">Make your voice heard.</p>
                </div>
            </div>
        </div>

    )
}

function CommentSection(props: { sectionID: string, isAdmin: boolean }) {
    const {sectionID, isAdmin} = props;
    const [comments, setComments] = React.useState<CommentWUC[]>([]);
    const [loggedUser, setLoggedUser] = React.useState<User | null>(null);
    const [replyingTo, setReplyingTo] = React.useState<CommentWUC | null>(null);
    const commentRef = React.useRef<HTMLTextAreaElement>(null);

    const updateComments = (e: RecordSubscription<Comment>) => {
        if (e.action === "create") {
            retrieveCommentTreeAndUser(e.record).then((c) => setComments(prevComments => [c, ...prevComments]));
        }
    }

    useEffect(() => {
        if (isLoggedIn()) {
            retrieveLoggedUserID().then((id) => {
                retrieveUser(id).then((u) => setLoggedUser(u));
            })
        }
        retrieveSectionComments(sectionID).then((c) => setComments(c));
        subscribe("comments", '*', updateComments, {expand: "user, children, children.user", filter: '', fields: '*'})
    }, []);

    const handleNewComment = () => {
        if (commentRef.current) {
            const db_id = window.localStorage.getItem("db_id");
            submitComment(sectionID, db_id, commentRef.current.value);
        }
    }

    const handleReply = () => {
        if (commentRef.current) {
            const db_id = window.localStorage.getItem("db_id");
            submitComment(sectionID, db_id, commentRef.current.value, replyingTo.id);
        }
    }

    return (
        <div className="grid gap-6">
            {loggedUser &&
                (
                    <React.Fragment>
                        {replyingTo ?
                            <CommentInstance comment={replyingTo} depth={0} displayOptions={false} showReplies={false}/>
                            :
                            <StdDisplay loggedUser={loggedUser}/>
                        }
                        <div className="grid gap-2">
                            <Textarea ref={commentRef} id="comment-input" placeholder="Add a public comment"/>
                            <div className="flex items-center gap-2">
                                {replyingTo &&
                                    <Button onClick={() => setReplyingTo(null)} className="h-8" variant="outline">
                                        Cancel
                                    </Button>
                                }
                                <Button className="h-8"
                                        onClick={replyingTo ? () => handleReply() : () => handleNewComment()}>{replyingTo ? 'Reply' : 'Comment'}</Button>
                            </div>
                        </div>
                    </React.Fragment>
                )
            }

            <div className="grid gap-4">
                {comments.sort((a, b) => b.likes - a.likes).map((c) => (
                    <CommentInstance key={c.id} comment={c} depth={0} displayOptions={isLoggedIn()}
                                     setReplyingTo={setReplyingTo}/>
                ))}
            </div>
        </div>
    )
}

const CommentInstance = (props: {
    comment: CommentWUC,
    displayOptions: boolean,
    depth: number,
    setReplyingTo?: React.Dispatch<React.SetStateAction<CommentWUC>>
    showReplies?: boolean,
}) => {
    const {comment, displayOptions, depth, setReplyingTo, showReplies = true} = props;
    const images = comment.user.images;

    const [loggedLiked, setLoggedLiked] = React.useState(false);
    const likes = comment.likes + (loggedLiked ? 1 : 0);

    const handleLike = () => {
        if (isLoggedIn()) {
            // Optimistically update the state
            setLoggedLiked(prevLoggedLiked => !prevLoggedLiked);

            // Calculate the new likes count based on the current state
            const newLikesCount = loggedLiked ? likes - 1 : likes + 1;

            modifyComment(comment.id, comment.content, newLikesCount)
                .catch((error) => {
                    // If the request fails, revert the state back and handle the error
                    console.error("Error modifying comment:", error);
                    setLoggedLiked(prevLoggedLiked => !prevLoggedLiked);
                });
        } else {
            console.log("You must be logged in to like a comment.");
        }
    }

    return (
        <React.Fragment>
            <div className="flex items-start gap-4">
                <Avatar>
                    <AvatarImage src={images[0].url} alt="User avatar"/>
                    <AvatarFallback>{comment.user.display_name}</AvatarFallback>
                </Avatar>
                <div className="grid gap-1.5 w-full">
                    <div className="flex items-center gap-2">
                        <UserHoverCard user={comment.user}>
                            <div className="font-semibold hover:underline">{comment.user.display_name}</div>
                        </UserHoverCard>
                        <div className="text-xs text-gray-500 dark:text-gray-400">{comment.created}</div>
                    </div>
                    <div>{comment.content}</div>
                    {displayOptions &&
                        <div className="flex items-center gap-2 text-sm">
                            {depth < 3 &&
                                <Button onClick={() => {
                                    setReplyingTo(comment);
                                    const input = document.getElementById("comment-input");
                                    input.scrollIntoView({behavior: "smooth", block: "center"});
                                }} className="hover:underline"
                                        variant="ghost">
                                    <ReplyIcon className="mr-1.5 h-3 w-3"/>
                                    Reply
                                </Button>
                            }
                            <Button onClick={handleLike} className="hover:underline" variant="ghost">
                                <HeartIcon className={"mr-1.5 h-3 w-3"}/>
                                {likes} likes
                            </Button>
                        </div>
                    }
                </div>
            </div>
            {comment.children.length > 0 && showReplies &&
                <div className="grid gap-4 ml-8 pl-4 border-l">
                    {comment.children.map((c) => (
                        <CommentInstance key={c.id} comment={c} depth={depth + 1} displayOptions={displayOptions}
                                         setReplyingTo={setReplyingTo}/>
                    ))}
                </div>
            }
        </React.Fragment>

    );
};


function ReplyIcon(props) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <polyline points="9 17 4 12 9 7"/>
            <path d="M20 18v-2a4 4 0 0 0-4-4H4"/>
        </svg>
    )
}


function HeartIcon(props) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path
                d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/>
        </svg>
    )
}

export default CommentSection;
