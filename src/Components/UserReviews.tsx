/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/1qyqk248Cv0
 */
import {Input} from "@/Components/ui/input"
import React, {useEffect} from "react"
import {
    Pagination,
    PaginationContent,
    PaginationEllipsis,
    PaginationItem,
    PaginationLink,
    PaginationNext,
    PaginationPrevious
} from "@/Components/ui/pagination";
import {ReviewWithItem} from "@/Tools/Interfaces/reviewInterfaces";
import {getLIDescription, getLIName} from "@/Analysis/analysis";
import {Album} from "@/API/Interfaces/albumInterfaces";
import {Track} from "@/API/Interfaces/trackInterfaces";
import {Artist} from "@/API/Interfaces/artistInterfaces";
import {retrieveNumberOfReviews, retrievePaginatedReviews, submitReview} from "@/Tools/reviews";
import {User} from "@/Tools/Interfaces/userInterfaces";
import {createPictureSources, isTrack} from "@/Tools/utils";
import {Skeleton} from "@/Components/ui/skeleton";
import {MultistageDialog} from "@/Components/MultistageDialog";
import {DialogProps} from "@/Components/GenericDialog";
import {Button} from "@/Components/ui/button";
import {Separator} from "@/Components/ui/separator";
import {Textarea} from "@/Components/ui/textarea";
import {Label} from "@/Components/ui/label";
import {debouncedSearchResults} from "@/Tools/search";


function SkeletonReviewItem() {
    return (
        <div className="flex flex-col gap-4">
            <Skeleton className={'w-[300px] h-[300px] flex-shrink-0'}/>
            <div className="flex flex-col gap-1">
                <Skeleton className="h-6 w-16"/>
                <Skeleton className="h-4 w-32"/>
                <Skeleton className="h-4 w-20"/>
            </div>
        </div>
    )
}

function ReviewItem(props: { review: ReviewWithItem<Artist | Track | Album> }) {
    let images = null;
    if (isTrack(props.review.item)) {
        images = props.review.item.album.images
    } else {
        images = props.review.item.images
    }
    const imgSrcSet = createPictureSources(images, 0.25)
    return (
        <div className="flex flex-col gap-4">
            <div className="flex-shrink-0 w-fit">
                <img
                    width={300}
                    height={300}
                    alt="Album Cover"
                    className={"aspect-square object-cover"}
                    srcSet={imgSrcSet}
                />
            </div>
            <div>
                <h2 className="font-semibold text-lg line-clamp-2">{getLIName(props.review.item)}</h2>
                <p className="text-sm text-muted-foreground line-clamp-2">{getLIDescription(props.review.item)}</p>
                <div className="flex items-center gap-1 my-1">
                    {
                        Array(Math.floor(props.review.rating)).fill(0).map((_, i) => {
                            return <StarIcon key={i} className="w-4 h-4 fill-primary"/>
                        })
                    }
                    {
                        Array(Math.ceil(5 - props.review.rating)).fill(0).map((_, i) => {
                            return <StarIcon key={i} className="w-4 h-4"/>
                        })
                    }
                    <span className="text-xs text-muted-foreground dark:text-muted-muted">({props.review.rating})</span>
                </div>
            </div>
        </div>
    )
}

function NewReviewDialog() {

    const [selectedType, setSelectedType] = React.useState<'album' | 'artist' | 'track'>('album')
    const [searchInput, setSearchInput] = React.useState('')
    const [selectedItem, setSelectedItem] = React.useState<Artist | Track | Album | null>(null)
    const descriptionRef = React.useRef<HTMLTextAreaElement>(null)

    useEffect(() => {
        if (searchInput) {
            debouncedSearchResults(searchInput, selectedType).then(res => setSelectedItem(res[0]));
        }
    }, [searchInput]);

    const dialogProps: DialogProps[] = [
        {
            trigger: <Button variant={'secondary'}>New</Button>,
            title: "Select an item",
            description: "Select something to review.",
        },
        {
            trigger: <Button variant={'secondary'}>New</Button>,
            title: "Write a description",
            description: "Write a description for your item.",
            action: () => submitReview(selectedItem, 5, descriptionRef.current?.value),
            actionDescription: "Submit",
        }
    ]
    return (
        <MultistageDialog dialogProps={dialogProps}>
            <div className={"flex flex-col gap-4"}>
                <div>
                    <h3>Item type</h3>
                    <p className={"text-muted-foreground"}>Select the type of item you would like to
                        review.</p>
                </div>
                <Separator/>
                <div className={'inline-flex w-full gap-4'}>
                    <Button
                        variant={selectedType === 'album' ? 'default' : 'outline'}
                        onClick={() => setSelectedType('album')}>Album</Button>
                    <Button
                        variant={selectedType === 'artist' ? 'default' : 'outline'}
                        onClick={() => setSelectedType('artist')}>Artist</Button>
                    <Button
                        variant={selectedType === 'track' ? 'default' : 'outline'}
                        onClick={() => setSelectedType('track')}>Track</Button>
                </div>
                <div>
                    <h3><span className={"capitalize"}>{selectedType}</span> name</h3>
                    <p className={"text-muted-foreground"}>Type in the name of the item you would like to review.</p>
                </div>
                <Separator/>
                <div className={'inline-flex w-full gap-4'}>
                    <Input placeholder={`Name of ${selectedType}`} onChange={(e) => setSearchInput(e.target.value)}/>
                </div>
            </div>


            {selectedItem &&
                <div>
                    <div className="border p-4 rounded">
                        <Label className="sr-only" htmlFor="song">
                            {getLIName(selectedItem)}
                        </Label>
                        <h3>{getLIName(selectedItem)}</h3>
                        <p className={"text-sm text-muted-foreground"}>{getLIDescription(selectedItem)}</p>
                    </div>
                    <div className="mt-4">
                        <Label className="sr-only" htmlFor="review">
                            Review Content
                        </Label>
                        <Textarea className="min-h-[10rem]" id="review" placeholder="Write your review here."/>
                    </div>
                </div>
            }


        </MultistageDialog>
    )
}

export function UserReviews(props: { user: User | null }) {
    const {user} = props

    const [focusedPage, setFocusedPage] = React.useState(1)
    const [numOfReviews, setNumOfReviews] = React.useState(1)
    const numOfPages = Math.ceil(numOfReviews / 3)
    const [reviews, setReviews] = React.useState<ReviewWithItem<Artist | Track | Album>[]>([])

    React.useEffect(() => {
        if (user) {
            retrieveNumberOfReviews(user.id).then(res => {
                    setNumOfReviews(res)
                }
            )
            retrievePaginatedReviews(user.id, focusedPage, 3).then(res => {
                setReviews(res.items)
            })
        }
    }, [user])

    React.useEffect(() => {
        if (user) {
            setReviews([])
            retrievePaginatedReviews(user.id, focusedPage, 3).then(res => {
                setReviews(res.items)
            })
        }

    }, [focusedPage])

    console.log(numOfReviews)


    return (
        <div className="px-4 py-6 max-w-7xl mx-auto space-y-6">
            <Input placeholder="Search..." type="search"/>
            <div className="relative grid gap-4 md:grid-cols-2 xl:grid-cols-3 h-96">
                {
                    reviews.map((review, i) => {
                        return <ReviewItem key={i} review={review}/>
                    })
                }
                {
                    Array(3 - reviews.length).fill(0).map((_, i) => {
                        return <SkeletonReviewItem key={i}/>
                    })
                }
                {
                    reviews.length === 0 &&
                    <p className={"centre font-bold text-3xl"}>[PH] ARRAY EMPTY [PH]</p>
                }
            </div>
            <Pagination>
                <PaginationContent>

                    {focusedPage > 1 &&
                        <React.Fragment>
                            <PaginationItem>
                                <PaginationPrevious onClick={() => setFocusedPage(curr => curr - 1)}/>
                            </PaginationItem>
                            <PaginationItem>
                                <Button variant={'ghost'}
                                        onClick={() => setFocusedPage(curr => curr - 1)}>{focusedPage - 1}</Button>
                            </PaginationItem>
                        </React.Fragment>
                    }
                    <PaginationItem>
                        <PaginationLink className={"border"} href="#">{focusedPage}</PaginationLink>
                    </PaginationItem>

                    {focusedPage < numOfPages &&
                        <PaginationItem>
                            <Button variant={'ghost'}
                                    onClick={() => setFocusedPage(curr => curr + 1)}>{focusedPage + 1}</Button>
                        </PaginationItem>
                    }

                    {focusedPage <= numOfPages - 1 &&
                        <React.Fragment>
                            <PaginationItem>
                                <PaginationEllipsis/>
                            </PaginationItem>
                            <PaginationItem>
                                <PaginationNext onClick={() => setFocusedPage(curr => curr + 1)}/>
                            </PaginationItem>
                        </React.Fragment>
                    }
                </PaginationContent>
            </Pagination>
            <NewReviewDialog/>
        </div>
    )
}


function SearchIcon(props) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <circle cx="11" cy="11" r="8"/>
            <path d="m21 21-4.3-4.3"/>
        </svg>
    )
}


function StarIcon(props) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <polygon
                points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
        </svg>
    )
}
